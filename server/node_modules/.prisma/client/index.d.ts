
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Supplier
 * 
 */
export type Supplier = $Result.DefaultSelection<Prisma.$SupplierPayload>
/**
 * Model SupplierProduct
 * 
 */
export type SupplierProduct = $Result.DefaultSelection<Prisma.$SupplierProductPayload>
/**
 * Model Demander
 * 
 */
export type Demander = $Result.DefaultSelection<Prisma.$DemanderPayload>
/**
 * Model DemanderProduct
 * 
 */
export type DemanderProduct = $Result.DefaultSelection<Prisma.$DemanderProductPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Suppliers
 * const suppliers = await prisma.supplier.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Suppliers
   * const suppliers = await prisma.supplier.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.supplier`: Exposes CRUD operations for the **Supplier** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Suppliers
    * const suppliers = await prisma.supplier.findMany()
    * ```
    */
  get supplier(): Prisma.SupplierDelegate<ExtArgs>;

  /**
   * `prisma.supplierProduct`: Exposes CRUD operations for the **SupplierProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SupplierProducts
    * const supplierProducts = await prisma.supplierProduct.findMany()
    * ```
    */
  get supplierProduct(): Prisma.SupplierProductDelegate<ExtArgs>;

  /**
   * `prisma.demander`: Exposes CRUD operations for the **Demander** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Demanders
    * const demanders = await prisma.demander.findMany()
    * ```
    */
  get demander(): Prisma.DemanderDelegate<ExtArgs>;

  /**
   * `prisma.demanderProduct`: Exposes CRUD operations for the **DemanderProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DemanderProducts
    * const demanderProducts = await prisma.demanderProduct.findMany()
    * ```
    */
  get demanderProduct(): Prisma.DemanderProductDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.6.0
   * Query Engine version: e95e739751f42d8ca026f6b910f5a2dc5adeaeee
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Supplier: 'Supplier',
    SupplierProduct: 'SupplierProduct',
    Demander: 'Demander',
    DemanderProduct: 'DemanderProduct'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    uwbc?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'supplier' | 'supplierProduct' | 'demander' | 'demanderProduct'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Supplier: {
        payload: Prisma.$SupplierPayload<ExtArgs>
        fields: Prisma.SupplierFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SupplierFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SupplierFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          findFirst: {
            args: Prisma.SupplierFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SupplierFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          findMany: {
            args: Prisma.SupplierFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>[]
          }
          create: {
            args: Prisma.SupplierCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          createMany: {
            args: Prisma.SupplierCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SupplierDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          update: {
            args: Prisma.SupplierUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          deleteMany: {
            args: Prisma.SupplierDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SupplierUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SupplierUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          aggregate: {
            args: Prisma.SupplierAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSupplier>
          }
          groupBy: {
            args: Prisma.SupplierGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SupplierGroupByOutputType>[]
          }
          count: {
            args: Prisma.SupplierCountArgs<ExtArgs>,
            result: $Utils.Optional<SupplierCountAggregateOutputType> | number
          }
        }
      }
      SupplierProduct: {
        payload: Prisma.$SupplierProductPayload<ExtArgs>
        fields: Prisma.SupplierProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SupplierProductFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SupplierProductFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierProductPayload>
          }
          findFirst: {
            args: Prisma.SupplierProductFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SupplierProductFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierProductPayload>
          }
          findMany: {
            args: Prisma.SupplierProductFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierProductPayload>[]
          }
          create: {
            args: Prisma.SupplierProductCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierProductPayload>
          }
          createMany: {
            args: Prisma.SupplierProductCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SupplierProductDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierProductPayload>
          }
          update: {
            args: Prisma.SupplierProductUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierProductPayload>
          }
          deleteMany: {
            args: Prisma.SupplierProductDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SupplierProductUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SupplierProductUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SupplierProductPayload>
          }
          aggregate: {
            args: Prisma.SupplierProductAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSupplierProduct>
          }
          groupBy: {
            args: Prisma.SupplierProductGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SupplierProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.SupplierProductCountArgs<ExtArgs>,
            result: $Utils.Optional<SupplierProductCountAggregateOutputType> | number
          }
        }
      }
      Demander: {
        payload: Prisma.$DemanderPayload<ExtArgs>
        fields: Prisma.DemanderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DemanderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DemanderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DemanderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DemanderPayload>
          }
          findFirst: {
            args: Prisma.DemanderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DemanderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DemanderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DemanderPayload>
          }
          findMany: {
            args: Prisma.DemanderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DemanderPayload>[]
          }
          create: {
            args: Prisma.DemanderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DemanderPayload>
          }
          createMany: {
            args: Prisma.DemanderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DemanderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DemanderPayload>
          }
          update: {
            args: Prisma.DemanderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DemanderPayload>
          }
          deleteMany: {
            args: Prisma.DemanderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DemanderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DemanderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DemanderPayload>
          }
          aggregate: {
            args: Prisma.DemanderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDemander>
          }
          groupBy: {
            args: Prisma.DemanderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DemanderGroupByOutputType>[]
          }
          count: {
            args: Prisma.DemanderCountArgs<ExtArgs>,
            result: $Utils.Optional<DemanderCountAggregateOutputType> | number
          }
        }
      }
      DemanderProduct: {
        payload: Prisma.$DemanderProductPayload<ExtArgs>
        fields: Prisma.DemanderProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DemanderProductFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DemanderProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DemanderProductFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DemanderProductPayload>
          }
          findFirst: {
            args: Prisma.DemanderProductFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DemanderProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DemanderProductFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DemanderProductPayload>
          }
          findMany: {
            args: Prisma.DemanderProductFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DemanderProductPayload>[]
          }
          create: {
            args: Prisma.DemanderProductCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DemanderProductPayload>
          }
          createMany: {
            args: Prisma.DemanderProductCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DemanderProductDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DemanderProductPayload>
          }
          update: {
            args: Prisma.DemanderProductUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DemanderProductPayload>
          }
          deleteMany: {
            args: Prisma.DemanderProductDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DemanderProductUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DemanderProductUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DemanderProductPayload>
          }
          aggregate: {
            args: Prisma.DemanderProductAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDemanderProduct>
          }
          groupBy: {
            args: Prisma.DemanderProductGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DemanderProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.DemanderProductCountArgs<ExtArgs>,
            result: $Utils.Optional<DemanderProductCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SupplierCountOutputType
   */

  export type SupplierCountOutputType = {
    products: number
  }

  export type SupplierCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | SupplierCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes

  /**
   * SupplierCountOutputType without action
   */
  export type SupplierCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCountOutputType
     */
    select?: SupplierCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SupplierCountOutputType without action
   */
  export type SupplierCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierProductWhereInput
  }



  /**
   * Count Type DemanderCountOutputType
   */

  export type DemanderCountOutputType = {
    products: number
  }

  export type DemanderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | DemanderCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes

  /**
   * DemanderCountOutputType without action
   */
  export type DemanderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemanderCountOutputType
     */
    select?: DemanderCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DemanderCountOutputType without action
   */
  export type DemanderCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DemanderProductWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Supplier
   */

  export type AggregateSupplier = {
    _count: SupplierCountAggregateOutputType | null
    _avg: SupplierAvgAggregateOutputType | null
    _sum: SupplierSumAggregateOutputType | null
    _min: SupplierMinAggregateOutputType | null
    _max: SupplierMaxAggregateOutputType | null
  }

  export type SupplierAvgAggregateOutputType = {
    id: number | null
  }

  export type SupplierSumAggregateOutputType = {
    id: number | null
  }

  export type SupplierMinAggregateOutputType = {
    id: number | null
    userType: string | null
    email: string | null
    organizationName: string | null
    address: string | null
  }

  export type SupplierMaxAggregateOutputType = {
    id: number | null
    userType: string | null
    email: string | null
    organizationName: string | null
    address: string | null
  }

  export type SupplierCountAggregateOutputType = {
    id: number
    userType: number
    email: number
    organizationName: number
    address: number
    _all: number
  }


  export type SupplierAvgAggregateInputType = {
    id?: true
  }

  export type SupplierSumAggregateInputType = {
    id?: true
  }

  export type SupplierMinAggregateInputType = {
    id?: true
    userType?: true
    email?: true
    organizationName?: true
    address?: true
  }

  export type SupplierMaxAggregateInputType = {
    id?: true
    userType?: true
    email?: true
    organizationName?: true
    address?: true
  }

  export type SupplierCountAggregateInputType = {
    id?: true
    userType?: true
    email?: true
    organizationName?: true
    address?: true
    _all?: true
  }

  export type SupplierAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Supplier to aggregate.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Suppliers
    **/
    _count?: true | SupplierCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SupplierAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SupplierSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SupplierMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SupplierMaxAggregateInputType
  }

  export type GetSupplierAggregateType<T extends SupplierAggregateArgs> = {
        [P in keyof T & keyof AggregateSupplier]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSupplier[P]>
      : GetScalarType<T[P], AggregateSupplier[P]>
  }




  export type SupplierGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierWhereInput
    orderBy?: SupplierOrderByWithAggregationInput | SupplierOrderByWithAggregationInput[]
    by: SupplierScalarFieldEnum[] | SupplierScalarFieldEnum
    having?: SupplierScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SupplierCountAggregateInputType | true
    _avg?: SupplierAvgAggregateInputType
    _sum?: SupplierSumAggregateInputType
    _min?: SupplierMinAggregateInputType
    _max?: SupplierMaxAggregateInputType
  }

  export type SupplierGroupByOutputType = {
    id: number
    userType: string
    email: string
    organizationName: string
    address: string
    _count: SupplierCountAggregateOutputType | null
    _avg: SupplierAvgAggregateOutputType | null
    _sum: SupplierSumAggregateOutputType | null
    _min: SupplierMinAggregateOutputType | null
    _max: SupplierMaxAggregateOutputType | null
  }

  type GetSupplierGroupByPayload<T extends SupplierGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SupplierGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SupplierGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SupplierGroupByOutputType[P]>
            : GetScalarType<T[P], SupplierGroupByOutputType[P]>
        }
      >
    >


  export type SupplierSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userType?: boolean
    email?: boolean
    organizationName?: boolean
    address?: boolean
    products?: boolean | Supplier$productsArgs<ExtArgs>
    _count?: boolean | SupplierCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supplier"]>

  export type SupplierSelectScalar = {
    id?: boolean
    userType?: boolean
    email?: boolean
    organizationName?: boolean
    address?: boolean
  }

  export type SupplierInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | Supplier$productsArgs<ExtArgs>
    _count?: boolean | SupplierCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SupplierPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Supplier"
    objects: {
      products: Prisma.$SupplierProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userType: string
      email: string
      organizationName: string
      address: string
    }, ExtArgs["result"]["supplier"]>
    composites: {}
  }


  type SupplierGetPayload<S extends boolean | null | undefined | SupplierDefaultArgs> = $Result.GetResult<Prisma.$SupplierPayload, S>

  type SupplierCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SupplierFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SupplierCountAggregateInputType | true
    }

  export interface SupplierDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Supplier'], meta: { name: 'Supplier' } }
    /**
     * Find zero or one Supplier that matches the filter.
     * @param {SupplierFindUniqueArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SupplierFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SupplierFindUniqueArgs<ExtArgs>>
    ): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Supplier that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SupplierFindUniqueOrThrowArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SupplierFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SupplierFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Supplier that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierFindFirstArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SupplierFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SupplierFindFirstArgs<ExtArgs>>
    ): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Supplier that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierFindFirstOrThrowArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SupplierFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SupplierFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Suppliers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Suppliers
     * const suppliers = await prisma.supplier.findMany()
     * 
     * // Get first 10 Suppliers
     * const suppliers = await prisma.supplier.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const supplierWithIdOnly = await prisma.supplier.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SupplierFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SupplierFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Supplier.
     * @param {SupplierCreateArgs} args - Arguments to create a Supplier.
     * @example
     * // Create one Supplier
     * const Supplier = await prisma.supplier.create({
     *   data: {
     *     // ... data to create a Supplier
     *   }
     * })
     * 
    **/
    create<T extends SupplierCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SupplierCreateArgs<ExtArgs>>
    ): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Suppliers.
     *     @param {SupplierCreateManyArgs} args - Arguments to create many Suppliers.
     *     @example
     *     // Create many Suppliers
     *     const supplier = await prisma.supplier.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SupplierCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SupplierCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Supplier.
     * @param {SupplierDeleteArgs} args - Arguments to delete one Supplier.
     * @example
     * // Delete one Supplier
     * const Supplier = await prisma.supplier.delete({
     *   where: {
     *     // ... filter to delete one Supplier
     *   }
     * })
     * 
    **/
    delete<T extends SupplierDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SupplierDeleteArgs<ExtArgs>>
    ): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Supplier.
     * @param {SupplierUpdateArgs} args - Arguments to update one Supplier.
     * @example
     * // Update one Supplier
     * const supplier = await prisma.supplier.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SupplierUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SupplierUpdateArgs<ExtArgs>>
    ): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Suppliers.
     * @param {SupplierDeleteManyArgs} args - Arguments to filter Suppliers to delete.
     * @example
     * // Delete a few Suppliers
     * const { count } = await prisma.supplier.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SupplierDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SupplierDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Suppliers
     * const supplier = await prisma.supplier.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SupplierUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SupplierUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Supplier.
     * @param {SupplierUpsertArgs} args - Arguments to update or create a Supplier.
     * @example
     * // Update or create a Supplier
     * const supplier = await prisma.supplier.upsert({
     *   create: {
     *     // ... data to create a Supplier
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Supplier we want to update
     *   }
     * })
    **/
    upsert<T extends SupplierUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SupplierUpsertArgs<ExtArgs>>
    ): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCountArgs} args - Arguments to filter Suppliers to count.
     * @example
     * // Count the number of Suppliers
     * const count = await prisma.supplier.count({
     *   where: {
     *     // ... the filter for the Suppliers we want to count
     *   }
     * })
    **/
    count<T extends SupplierCountArgs>(
      args?: Subset<T, SupplierCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SupplierCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Supplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SupplierAggregateArgs>(args: Subset<T, SupplierAggregateArgs>): Prisma.PrismaPromise<GetSupplierAggregateType<T>>

    /**
     * Group by Supplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SupplierGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SupplierGroupByArgs['orderBy'] }
        : { orderBy?: SupplierGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SupplierGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSupplierGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Supplier model
   */
  readonly fields: SupplierFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Supplier.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SupplierClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    products<T extends Supplier$productsArgs<ExtArgs> = {}>(args?: Subset<T, Supplier$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierProductPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Supplier model
   */ 
  interface SupplierFieldRefs {
    readonly id: FieldRef<"Supplier", 'Int'>
    readonly userType: FieldRef<"Supplier", 'String'>
    readonly email: FieldRef<"Supplier", 'String'>
    readonly organizationName: FieldRef<"Supplier", 'String'>
    readonly address: FieldRef<"Supplier", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Supplier findUnique
   */
  export type SupplierFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where: SupplierWhereUniqueInput
  }


  /**
   * Supplier findUniqueOrThrow
   */
  export type SupplierFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where: SupplierWhereUniqueInput
  }


  /**
   * Supplier findFirst
   */
  export type SupplierFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Suppliers.
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Suppliers.
     */
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }


  /**
   * Supplier findFirstOrThrow
   */
  export type SupplierFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Suppliers.
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Suppliers.
     */
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }


  /**
   * Supplier findMany
   */
  export type SupplierFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Suppliers to fetch.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Suppliers.
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }


  /**
   * Supplier create
   */
  export type SupplierCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * The data needed to create a Supplier.
     */
    data: XOR<SupplierCreateInput, SupplierUncheckedCreateInput>
  }


  /**
   * Supplier createMany
   */
  export type SupplierCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Suppliers.
     */
    data: SupplierCreateManyInput | SupplierCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Supplier update
   */
  export type SupplierUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * The data needed to update a Supplier.
     */
    data: XOR<SupplierUpdateInput, SupplierUncheckedUpdateInput>
    /**
     * Choose, which Supplier to update.
     */
    where: SupplierWhereUniqueInput
  }


  /**
   * Supplier updateMany
   */
  export type SupplierUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Suppliers.
     */
    data: XOR<SupplierUpdateManyMutationInput, SupplierUncheckedUpdateManyInput>
    /**
     * Filter which Suppliers to update
     */
    where?: SupplierWhereInput
  }


  /**
   * Supplier upsert
   */
  export type SupplierUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * The filter to search for the Supplier to update in case it exists.
     */
    where: SupplierWhereUniqueInput
    /**
     * In case the Supplier found by the `where` argument doesn't exist, create a new Supplier with this data.
     */
    create: XOR<SupplierCreateInput, SupplierUncheckedCreateInput>
    /**
     * In case the Supplier was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SupplierUpdateInput, SupplierUncheckedUpdateInput>
  }


  /**
   * Supplier delete
   */
  export type SupplierDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter which Supplier to delete.
     */
    where: SupplierWhereUniqueInput
  }


  /**
   * Supplier deleteMany
   */
  export type SupplierDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Suppliers to delete
     */
    where?: SupplierWhereInput
  }


  /**
   * Supplier.products
   */
  export type Supplier$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierProduct
     */
    select?: SupplierProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierProductInclude<ExtArgs> | null
    where?: SupplierProductWhereInput
    orderBy?: SupplierProductOrderByWithRelationInput | SupplierProductOrderByWithRelationInput[]
    cursor?: SupplierProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SupplierProductScalarFieldEnum | SupplierProductScalarFieldEnum[]
  }


  /**
   * Supplier without action
   */
  export type SupplierDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierInclude<ExtArgs> | null
  }



  /**
   * Model SupplierProduct
   */

  export type AggregateSupplierProduct = {
    _count: SupplierProductCountAggregateOutputType | null
    _avg: SupplierProductAvgAggregateOutputType | null
    _sum: SupplierProductSumAggregateOutputType | null
    _min: SupplierProductMinAggregateOutputType | null
    _max: SupplierProductMaxAggregateOutputType | null
  }

  export type SupplierProductAvgAggregateOutputType = {
    id: number | null
    unitPrice: number | null
    totalPrice: number | null
    quantity: number | null
    historicalQuantity: number | null
    supplierId: number | null
  }

  export type SupplierProductSumAggregateOutputType = {
    id: number | null
    unitPrice: number | null
    totalPrice: number | null
    quantity: number | null
    historicalQuantity: number | null
    supplierId: number | null
  }

  export type SupplierProductMinAggregateOutputType = {
    id: number | null
    productName: string | null
    unitPrice: number | null
    totalPrice: number | null
    quantity: number | null
    historicalQuantity: number | null
    createdAt: Date | null
    supplierId: number | null
  }

  export type SupplierProductMaxAggregateOutputType = {
    id: number | null
    productName: string | null
    unitPrice: number | null
    totalPrice: number | null
    quantity: number | null
    historicalQuantity: number | null
    createdAt: Date | null
    supplierId: number | null
  }

  export type SupplierProductCountAggregateOutputType = {
    id: number
    productName: number
    unitPrice: number
    totalPrice: number
    quantity: number
    historicalQuantity: number
    createdAt: number
    supplierId: number
    _all: number
  }


  export type SupplierProductAvgAggregateInputType = {
    id?: true
    unitPrice?: true
    totalPrice?: true
    quantity?: true
    historicalQuantity?: true
    supplierId?: true
  }

  export type SupplierProductSumAggregateInputType = {
    id?: true
    unitPrice?: true
    totalPrice?: true
    quantity?: true
    historicalQuantity?: true
    supplierId?: true
  }

  export type SupplierProductMinAggregateInputType = {
    id?: true
    productName?: true
    unitPrice?: true
    totalPrice?: true
    quantity?: true
    historicalQuantity?: true
    createdAt?: true
    supplierId?: true
  }

  export type SupplierProductMaxAggregateInputType = {
    id?: true
    productName?: true
    unitPrice?: true
    totalPrice?: true
    quantity?: true
    historicalQuantity?: true
    createdAt?: true
    supplierId?: true
  }

  export type SupplierProductCountAggregateInputType = {
    id?: true
    productName?: true
    unitPrice?: true
    totalPrice?: true
    quantity?: true
    historicalQuantity?: true
    createdAt?: true
    supplierId?: true
    _all?: true
  }

  export type SupplierProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SupplierProduct to aggregate.
     */
    where?: SupplierProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupplierProducts to fetch.
     */
    orderBy?: SupplierProductOrderByWithRelationInput | SupplierProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SupplierProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupplierProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupplierProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SupplierProducts
    **/
    _count?: true | SupplierProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SupplierProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SupplierProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SupplierProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SupplierProductMaxAggregateInputType
  }

  export type GetSupplierProductAggregateType<T extends SupplierProductAggregateArgs> = {
        [P in keyof T & keyof AggregateSupplierProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSupplierProduct[P]>
      : GetScalarType<T[P], AggregateSupplierProduct[P]>
  }




  export type SupplierProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierProductWhereInput
    orderBy?: SupplierProductOrderByWithAggregationInput | SupplierProductOrderByWithAggregationInput[]
    by: SupplierProductScalarFieldEnum[] | SupplierProductScalarFieldEnum
    having?: SupplierProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SupplierProductCountAggregateInputType | true
    _avg?: SupplierProductAvgAggregateInputType
    _sum?: SupplierProductSumAggregateInputType
    _min?: SupplierProductMinAggregateInputType
    _max?: SupplierProductMaxAggregateInputType
  }

  export type SupplierProductGroupByOutputType = {
    id: number
    productName: string
    unitPrice: number
    totalPrice: number
    quantity: number
    historicalQuantity: number
    createdAt: Date
    supplierId: number
    _count: SupplierProductCountAggregateOutputType | null
    _avg: SupplierProductAvgAggregateOutputType | null
    _sum: SupplierProductSumAggregateOutputType | null
    _min: SupplierProductMinAggregateOutputType | null
    _max: SupplierProductMaxAggregateOutputType | null
  }

  type GetSupplierProductGroupByPayload<T extends SupplierProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SupplierProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SupplierProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SupplierProductGroupByOutputType[P]>
            : GetScalarType<T[P], SupplierProductGroupByOutputType[P]>
        }
      >
    >


  export type SupplierProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productName?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    quantity?: boolean
    historicalQuantity?: boolean
    createdAt?: boolean
    supplierId?: boolean
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supplierProduct"]>

  export type SupplierProductSelectScalar = {
    id?: boolean
    productName?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    quantity?: boolean
    historicalQuantity?: boolean
    createdAt?: boolean
    supplierId?: boolean
  }

  export type SupplierProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
  }


  export type $SupplierProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SupplierProduct"
    objects: {
      supplier: Prisma.$SupplierPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      productName: string
      unitPrice: number
      totalPrice: number
      quantity: number
      historicalQuantity: number
      createdAt: Date
      supplierId: number
    }, ExtArgs["result"]["supplierProduct"]>
    composites: {}
  }


  type SupplierProductGetPayload<S extends boolean | null | undefined | SupplierProductDefaultArgs> = $Result.GetResult<Prisma.$SupplierProductPayload, S>

  type SupplierProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SupplierProductFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SupplierProductCountAggregateInputType | true
    }

  export interface SupplierProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SupplierProduct'], meta: { name: 'SupplierProduct' } }
    /**
     * Find zero or one SupplierProduct that matches the filter.
     * @param {SupplierProductFindUniqueArgs} args - Arguments to find a SupplierProduct
     * @example
     * // Get one SupplierProduct
     * const supplierProduct = await prisma.supplierProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SupplierProductFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SupplierProductFindUniqueArgs<ExtArgs>>
    ): Prisma__SupplierProductClient<$Result.GetResult<Prisma.$SupplierProductPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SupplierProduct that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SupplierProductFindUniqueOrThrowArgs} args - Arguments to find a SupplierProduct
     * @example
     * // Get one SupplierProduct
     * const supplierProduct = await prisma.supplierProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SupplierProductFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SupplierProductFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SupplierProductClient<$Result.GetResult<Prisma.$SupplierProductPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SupplierProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierProductFindFirstArgs} args - Arguments to find a SupplierProduct
     * @example
     * // Get one SupplierProduct
     * const supplierProduct = await prisma.supplierProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SupplierProductFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SupplierProductFindFirstArgs<ExtArgs>>
    ): Prisma__SupplierProductClient<$Result.GetResult<Prisma.$SupplierProductPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SupplierProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierProductFindFirstOrThrowArgs} args - Arguments to find a SupplierProduct
     * @example
     * // Get one SupplierProduct
     * const supplierProduct = await prisma.supplierProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SupplierProductFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SupplierProductFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SupplierProductClient<$Result.GetResult<Prisma.$SupplierProductPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SupplierProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SupplierProducts
     * const supplierProducts = await prisma.supplierProduct.findMany()
     * 
     * // Get first 10 SupplierProducts
     * const supplierProducts = await prisma.supplierProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const supplierProductWithIdOnly = await prisma.supplierProduct.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SupplierProductFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SupplierProductFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierProductPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SupplierProduct.
     * @param {SupplierProductCreateArgs} args - Arguments to create a SupplierProduct.
     * @example
     * // Create one SupplierProduct
     * const SupplierProduct = await prisma.supplierProduct.create({
     *   data: {
     *     // ... data to create a SupplierProduct
     *   }
     * })
     * 
    **/
    create<T extends SupplierProductCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SupplierProductCreateArgs<ExtArgs>>
    ): Prisma__SupplierProductClient<$Result.GetResult<Prisma.$SupplierProductPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SupplierProducts.
     *     @param {SupplierProductCreateManyArgs} args - Arguments to create many SupplierProducts.
     *     @example
     *     // Create many SupplierProducts
     *     const supplierProduct = await prisma.supplierProduct.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SupplierProductCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SupplierProductCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SupplierProduct.
     * @param {SupplierProductDeleteArgs} args - Arguments to delete one SupplierProduct.
     * @example
     * // Delete one SupplierProduct
     * const SupplierProduct = await prisma.supplierProduct.delete({
     *   where: {
     *     // ... filter to delete one SupplierProduct
     *   }
     * })
     * 
    **/
    delete<T extends SupplierProductDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SupplierProductDeleteArgs<ExtArgs>>
    ): Prisma__SupplierProductClient<$Result.GetResult<Prisma.$SupplierProductPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SupplierProduct.
     * @param {SupplierProductUpdateArgs} args - Arguments to update one SupplierProduct.
     * @example
     * // Update one SupplierProduct
     * const supplierProduct = await prisma.supplierProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SupplierProductUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SupplierProductUpdateArgs<ExtArgs>>
    ): Prisma__SupplierProductClient<$Result.GetResult<Prisma.$SupplierProductPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SupplierProducts.
     * @param {SupplierProductDeleteManyArgs} args - Arguments to filter SupplierProducts to delete.
     * @example
     * // Delete a few SupplierProducts
     * const { count } = await prisma.supplierProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SupplierProductDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SupplierProductDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SupplierProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SupplierProducts
     * const supplierProduct = await prisma.supplierProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SupplierProductUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SupplierProductUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SupplierProduct.
     * @param {SupplierProductUpsertArgs} args - Arguments to update or create a SupplierProduct.
     * @example
     * // Update or create a SupplierProduct
     * const supplierProduct = await prisma.supplierProduct.upsert({
     *   create: {
     *     // ... data to create a SupplierProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SupplierProduct we want to update
     *   }
     * })
    **/
    upsert<T extends SupplierProductUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SupplierProductUpsertArgs<ExtArgs>>
    ): Prisma__SupplierProductClient<$Result.GetResult<Prisma.$SupplierProductPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SupplierProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierProductCountArgs} args - Arguments to filter SupplierProducts to count.
     * @example
     * // Count the number of SupplierProducts
     * const count = await prisma.supplierProduct.count({
     *   where: {
     *     // ... the filter for the SupplierProducts we want to count
     *   }
     * })
    **/
    count<T extends SupplierProductCountArgs>(
      args?: Subset<T, SupplierProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SupplierProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SupplierProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SupplierProductAggregateArgs>(args: Subset<T, SupplierProductAggregateArgs>): Prisma.PrismaPromise<GetSupplierProductAggregateType<T>>

    /**
     * Group by SupplierProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SupplierProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SupplierProductGroupByArgs['orderBy'] }
        : { orderBy?: SupplierProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SupplierProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSupplierProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SupplierProduct model
   */
  readonly fields: SupplierProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SupplierProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SupplierProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    supplier<T extends SupplierDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SupplierDefaultArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SupplierProduct model
   */ 
  interface SupplierProductFieldRefs {
    readonly id: FieldRef<"SupplierProduct", 'Int'>
    readonly productName: FieldRef<"SupplierProduct", 'String'>
    readonly unitPrice: FieldRef<"SupplierProduct", 'Float'>
    readonly totalPrice: FieldRef<"SupplierProduct", 'Float'>
    readonly quantity: FieldRef<"SupplierProduct", 'Int'>
    readonly historicalQuantity: FieldRef<"SupplierProduct", 'Int'>
    readonly createdAt: FieldRef<"SupplierProduct", 'DateTime'>
    readonly supplierId: FieldRef<"SupplierProduct", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * SupplierProduct findUnique
   */
  export type SupplierProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierProduct
     */
    select?: SupplierProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierProductInclude<ExtArgs> | null
    /**
     * Filter, which SupplierProduct to fetch.
     */
    where: SupplierProductWhereUniqueInput
  }


  /**
   * SupplierProduct findUniqueOrThrow
   */
  export type SupplierProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierProduct
     */
    select?: SupplierProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierProductInclude<ExtArgs> | null
    /**
     * Filter, which SupplierProduct to fetch.
     */
    where: SupplierProductWhereUniqueInput
  }


  /**
   * SupplierProduct findFirst
   */
  export type SupplierProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierProduct
     */
    select?: SupplierProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierProductInclude<ExtArgs> | null
    /**
     * Filter, which SupplierProduct to fetch.
     */
    where?: SupplierProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupplierProducts to fetch.
     */
    orderBy?: SupplierProductOrderByWithRelationInput | SupplierProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SupplierProducts.
     */
    cursor?: SupplierProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupplierProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupplierProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SupplierProducts.
     */
    distinct?: SupplierProductScalarFieldEnum | SupplierProductScalarFieldEnum[]
  }


  /**
   * SupplierProduct findFirstOrThrow
   */
  export type SupplierProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierProduct
     */
    select?: SupplierProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierProductInclude<ExtArgs> | null
    /**
     * Filter, which SupplierProduct to fetch.
     */
    where?: SupplierProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupplierProducts to fetch.
     */
    orderBy?: SupplierProductOrderByWithRelationInput | SupplierProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SupplierProducts.
     */
    cursor?: SupplierProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupplierProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupplierProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SupplierProducts.
     */
    distinct?: SupplierProductScalarFieldEnum | SupplierProductScalarFieldEnum[]
  }


  /**
   * SupplierProduct findMany
   */
  export type SupplierProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierProduct
     */
    select?: SupplierProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierProductInclude<ExtArgs> | null
    /**
     * Filter, which SupplierProducts to fetch.
     */
    where?: SupplierProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SupplierProducts to fetch.
     */
    orderBy?: SupplierProductOrderByWithRelationInput | SupplierProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SupplierProducts.
     */
    cursor?: SupplierProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SupplierProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SupplierProducts.
     */
    skip?: number
    distinct?: SupplierProductScalarFieldEnum | SupplierProductScalarFieldEnum[]
  }


  /**
   * SupplierProduct create
   */
  export type SupplierProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierProduct
     */
    select?: SupplierProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierProductInclude<ExtArgs> | null
    /**
     * The data needed to create a SupplierProduct.
     */
    data: XOR<SupplierProductCreateInput, SupplierProductUncheckedCreateInput>
  }


  /**
   * SupplierProduct createMany
   */
  export type SupplierProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SupplierProducts.
     */
    data: SupplierProductCreateManyInput | SupplierProductCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SupplierProduct update
   */
  export type SupplierProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierProduct
     */
    select?: SupplierProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierProductInclude<ExtArgs> | null
    /**
     * The data needed to update a SupplierProduct.
     */
    data: XOR<SupplierProductUpdateInput, SupplierProductUncheckedUpdateInput>
    /**
     * Choose, which SupplierProduct to update.
     */
    where: SupplierProductWhereUniqueInput
  }


  /**
   * SupplierProduct updateMany
   */
  export type SupplierProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SupplierProducts.
     */
    data: XOR<SupplierProductUpdateManyMutationInput, SupplierProductUncheckedUpdateManyInput>
    /**
     * Filter which SupplierProducts to update
     */
    where?: SupplierProductWhereInput
  }


  /**
   * SupplierProduct upsert
   */
  export type SupplierProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierProduct
     */
    select?: SupplierProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierProductInclude<ExtArgs> | null
    /**
     * The filter to search for the SupplierProduct to update in case it exists.
     */
    where: SupplierProductWhereUniqueInput
    /**
     * In case the SupplierProduct found by the `where` argument doesn't exist, create a new SupplierProduct with this data.
     */
    create: XOR<SupplierProductCreateInput, SupplierProductUncheckedCreateInput>
    /**
     * In case the SupplierProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SupplierProductUpdateInput, SupplierProductUncheckedUpdateInput>
  }


  /**
   * SupplierProduct delete
   */
  export type SupplierProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierProduct
     */
    select?: SupplierProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierProductInclude<ExtArgs> | null
    /**
     * Filter which SupplierProduct to delete.
     */
    where: SupplierProductWhereUniqueInput
  }


  /**
   * SupplierProduct deleteMany
   */
  export type SupplierProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SupplierProducts to delete
     */
    where?: SupplierProductWhereInput
  }


  /**
   * SupplierProduct without action
   */
  export type SupplierProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierProduct
     */
    select?: SupplierProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SupplierProductInclude<ExtArgs> | null
  }



  /**
   * Model Demander
   */

  export type AggregateDemander = {
    _count: DemanderCountAggregateOutputType | null
    _avg: DemanderAvgAggregateOutputType | null
    _sum: DemanderSumAggregateOutputType | null
    _min: DemanderMinAggregateOutputType | null
    _max: DemanderMaxAggregateOutputType | null
  }

  export type DemanderAvgAggregateOutputType = {
    id: number | null
  }

  export type DemanderSumAggregateOutputType = {
    id: number | null
  }

  export type DemanderMinAggregateOutputType = {
    id: number | null
    userType: string | null
    email: string | null
    organizationName: string | null
    address: string | null
  }

  export type DemanderMaxAggregateOutputType = {
    id: number | null
    userType: string | null
    email: string | null
    organizationName: string | null
    address: string | null
  }

  export type DemanderCountAggregateOutputType = {
    id: number
    userType: number
    email: number
    organizationName: number
    address: number
    _all: number
  }


  export type DemanderAvgAggregateInputType = {
    id?: true
  }

  export type DemanderSumAggregateInputType = {
    id?: true
  }

  export type DemanderMinAggregateInputType = {
    id?: true
    userType?: true
    email?: true
    organizationName?: true
    address?: true
  }

  export type DemanderMaxAggregateInputType = {
    id?: true
    userType?: true
    email?: true
    organizationName?: true
    address?: true
  }

  export type DemanderCountAggregateInputType = {
    id?: true
    userType?: true
    email?: true
    organizationName?: true
    address?: true
    _all?: true
  }

  export type DemanderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Demander to aggregate.
     */
    where?: DemanderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Demanders to fetch.
     */
    orderBy?: DemanderOrderByWithRelationInput | DemanderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DemanderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Demanders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Demanders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Demanders
    **/
    _count?: true | DemanderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DemanderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DemanderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DemanderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DemanderMaxAggregateInputType
  }

  export type GetDemanderAggregateType<T extends DemanderAggregateArgs> = {
        [P in keyof T & keyof AggregateDemander]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDemander[P]>
      : GetScalarType<T[P], AggregateDemander[P]>
  }




  export type DemanderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DemanderWhereInput
    orderBy?: DemanderOrderByWithAggregationInput | DemanderOrderByWithAggregationInput[]
    by: DemanderScalarFieldEnum[] | DemanderScalarFieldEnum
    having?: DemanderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DemanderCountAggregateInputType | true
    _avg?: DemanderAvgAggregateInputType
    _sum?: DemanderSumAggregateInputType
    _min?: DemanderMinAggregateInputType
    _max?: DemanderMaxAggregateInputType
  }

  export type DemanderGroupByOutputType = {
    id: number
    userType: string
    email: string
    organizationName: string
    address: string
    _count: DemanderCountAggregateOutputType | null
    _avg: DemanderAvgAggregateOutputType | null
    _sum: DemanderSumAggregateOutputType | null
    _min: DemanderMinAggregateOutputType | null
    _max: DemanderMaxAggregateOutputType | null
  }

  type GetDemanderGroupByPayload<T extends DemanderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DemanderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DemanderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DemanderGroupByOutputType[P]>
            : GetScalarType<T[P], DemanderGroupByOutputType[P]>
        }
      >
    >


  export type DemanderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userType?: boolean
    email?: boolean
    organizationName?: boolean
    address?: boolean
    products?: boolean | Demander$productsArgs<ExtArgs>
    _count?: boolean | DemanderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["demander"]>

  export type DemanderSelectScalar = {
    id?: boolean
    userType?: boolean
    email?: boolean
    organizationName?: boolean
    address?: boolean
  }

  export type DemanderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | Demander$productsArgs<ExtArgs>
    _count?: boolean | DemanderCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DemanderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Demander"
    objects: {
      products: Prisma.$DemanderProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userType: string
      email: string
      organizationName: string
      address: string
    }, ExtArgs["result"]["demander"]>
    composites: {}
  }


  type DemanderGetPayload<S extends boolean | null | undefined | DemanderDefaultArgs> = $Result.GetResult<Prisma.$DemanderPayload, S>

  type DemanderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DemanderFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: DemanderCountAggregateInputType | true
    }

  export interface DemanderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Demander'], meta: { name: 'Demander' } }
    /**
     * Find zero or one Demander that matches the filter.
     * @param {DemanderFindUniqueArgs} args - Arguments to find a Demander
     * @example
     * // Get one Demander
     * const demander = await prisma.demander.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DemanderFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DemanderFindUniqueArgs<ExtArgs>>
    ): Prisma__DemanderClient<$Result.GetResult<Prisma.$DemanderPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Demander that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DemanderFindUniqueOrThrowArgs} args - Arguments to find a Demander
     * @example
     * // Get one Demander
     * const demander = await prisma.demander.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DemanderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DemanderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DemanderClient<$Result.GetResult<Prisma.$DemanderPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Demander that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemanderFindFirstArgs} args - Arguments to find a Demander
     * @example
     * // Get one Demander
     * const demander = await prisma.demander.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DemanderFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DemanderFindFirstArgs<ExtArgs>>
    ): Prisma__DemanderClient<$Result.GetResult<Prisma.$DemanderPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Demander that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemanderFindFirstOrThrowArgs} args - Arguments to find a Demander
     * @example
     * // Get one Demander
     * const demander = await prisma.demander.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DemanderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DemanderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DemanderClient<$Result.GetResult<Prisma.$DemanderPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Demanders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemanderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Demanders
     * const demanders = await prisma.demander.findMany()
     * 
     * // Get first 10 Demanders
     * const demanders = await prisma.demander.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const demanderWithIdOnly = await prisma.demander.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DemanderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DemanderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemanderPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Demander.
     * @param {DemanderCreateArgs} args - Arguments to create a Demander.
     * @example
     * // Create one Demander
     * const Demander = await prisma.demander.create({
     *   data: {
     *     // ... data to create a Demander
     *   }
     * })
     * 
    **/
    create<T extends DemanderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DemanderCreateArgs<ExtArgs>>
    ): Prisma__DemanderClient<$Result.GetResult<Prisma.$DemanderPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Demanders.
     *     @param {DemanderCreateManyArgs} args - Arguments to create many Demanders.
     *     @example
     *     // Create many Demanders
     *     const demander = await prisma.demander.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DemanderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DemanderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Demander.
     * @param {DemanderDeleteArgs} args - Arguments to delete one Demander.
     * @example
     * // Delete one Demander
     * const Demander = await prisma.demander.delete({
     *   where: {
     *     // ... filter to delete one Demander
     *   }
     * })
     * 
    **/
    delete<T extends DemanderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DemanderDeleteArgs<ExtArgs>>
    ): Prisma__DemanderClient<$Result.GetResult<Prisma.$DemanderPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Demander.
     * @param {DemanderUpdateArgs} args - Arguments to update one Demander.
     * @example
     * // Update one Demander
     * const demander = await prisma.demander.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DemanderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DemanderUpdateArgs<ExtArgs>>
    ): Prisma__DemanderClient<$Result.GetResult<Prisma.$DemanderPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Demanders.
     * @param {DemanderDeleteManyArgs} args - Arguments to filter Demanders to delete.
     * @example
     * // Delete a few Demanders
     * const { count } = await prisma.demander.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DemanderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DemanderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Demanders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemanderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Demanders
     * const demander = await prisma.demander.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DemanderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DemanderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Demander.
     * @param {DemanderUpsertArgs} args - Arguments to update or create a Demander.
     * @example
     * // Update or create a Demander
     * const demander = await prisma.demander.upsert({
     *   create: {
     *     // ... data to create a Demander
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Demander we want to update
     *   }
     * })
    **/
    upsert<T extends DemanderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DemanderUpsertArgs<ExtArgs>>
    ): Prisma__DemanderClient<$Result.GetResult<Prisma.$DemanderPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Demanders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemanderCountArgs} args - Arguments to filter Demanders to count.
     * @example
     * // Count the number of Demanders
     * const count = await prisma.demander.count({
     *   where: {
     *     // ... the filter for the Demanders we want to count
     *   }
     * })
    **/
    count<T extends DemanderCountArgs>(
      args?: Subset<T, DemanderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DemanderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Demander.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemanderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DemanderAggregateArgs>(args: Subset<T, DemanderAggregateArgs>): Prisma.PrismaPromise<GetDemanderAggregateType<T>>

    /**
     * Group by Demander.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemanderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DemanderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DemanderGroupByArgs['orderBy'] }
        : { orderBy?: DemanderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DemanderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDemanderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Demander model
   */
  readonly fields: DemanderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Demander.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DemanderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    products<T extends Demander$productsArgs<ExtArgs> = {}>(args?: Subset<T, Demander$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemanderProductPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Demander model
   */ 
  interface DemanderFieldRefs {
    readonly id: FieldRef<"Demander", 'Int'>
    readonly userType: FieldRef<"Demander", 'String'>
    readonly email: FieldRef<"Demander", 'String'>
    readonly organizationName: FieldRef<"Demander", 'String'>
    readonly address: FieldRef<"Demander", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Demander findUnique
   */
  export type DemanderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demander
     */
    select?: DemanderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderInclude<ExtArgs> | null
    /**
     * Filter, which Demander to fetch.
     */
    where: DemanderWhereUniqueInput
  }


  /**
   * Demander findUniqueOrThrow
   */
  export type DemanderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demander
     */
    select?: DemanderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderInclude<ExtArgs> | null
    /**
     * Filter, which Demander to fetch.
     */
    where: DemanderWhereUniqueInput
  }


  /**
   * Demander findFirst
   */
  export type DemanderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demander
     */
    select?: DemanderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderInclude<ExtArgs> | null
    /**
     * Filter, which Demander to fetch.
     */
    where?: DemanderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Demanders to fetch.
     */
    orderBy?: DemanderOrderByWithRelationInput | DemanderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Demanders.
     */
    cursor?: DemanderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Demanders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Demanders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Demanders.
     */
    distinct?: DemanderScalarFieldEnum | DemanderScalarFieldEnum[]
  }


  /**
   * Demander findFirstOrThrow
   */
  export type DemanderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demander
     */
    select?: DemanderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderInclude<ExtArgs> | null
    /**
     * Filter, which Demander to fetch.
     */
    where?: DemanderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Demanders to fetch.
     */
    orderBy?: DemanderOrderByWithRelationInput | DemanderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Demanders.
     */
    cursor?: DemanderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Demanders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Demanders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Demanders.
     */
    distinct?: DemanderScalarFieldEnum | DemanderScalarFieldEnum[]
  }


  /**
   * Demander findMany
   */
  export type DemanderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demander
     */
    select?: DemanderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderInclude<ExtArgs> | null
    /**
     * Filter, which Demanders to fetch.
     */
    where?: DemanderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Demanders to fetch.
     */
    orderBy?: DemanderOrderByWithRelationInput | DemanderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Demanders.
     */
    cursor?: DemanderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Demanders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Demanders.
     */
    skip?: number
    distinct?: DemanderScalarFieldEnum | DemanderScalarFieldEnum[]
  }


  /**
   * Demander create
   */
  export type DemanderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demander
     */
    select?: DemanderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderInclude<ExtArgs> | null
    /**
     * The data needed to create a Demander.
     */
    data: XOR<DemanderCreateInput, DemanderUncheckedCreateInput>
  }


  /**
   * Demander createMany
   */
  export type DemanderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Demanders.
     */
    data: DemanderCreateManyInput | DemanderCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Demander update
   */
  export type DemanderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demander
     */
    select?: DemanderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderInclude<ExtArgs> | null
    /**
     * The data needed to update a Demander.
     */
    data: XOR<DemanderUpdateInput, DemanderUncheckedUpdateInput>
    /**
     * Choose, which Demander to update.
     */
    where: DemanderWhereUniqueInput
  }


  /**
   * Demander updateMany
   */
  export type DemanderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Demanders.
     */
    data: XOR<DemanderUpdateManyMutationInput, DemanderUncheckedUpdateManyInput>
    /**
     * Filter which Demanders to update
     */
    where?: DemanderWhereInput
  }


  /**
   * Demander upsert
   */
  export type DemanderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demander
     */
    select?: DemanderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderInclude<ExtArgs> | null
    /**
     * The filter to search for the Demander to update in case it exists.
     */
    where: DemanderWhereUniqueInput
    /**
     * In case the Demander found by the `where` argument doesn't exist, create a new Demander with this data.
     */
    create: XOR<DemanderCreateInput, DemanderUncheckedCreateInput>
    /**
     * In case the Demander was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DemanderUpdateInput, DemanderUncheckedUpdateInput>
  }


  /**
   * Demander delete
   */
  export type DemanderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demander
     */
    select?: DemanderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderInclude<ExtArgs> | null
    /**
     * Filter which Demander to delete.
     */
    where: DemanderWhereUniqueInput
  }


  /**
   * Demander deleteMany
   */
  export type DemanderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Demanders to delete
     */
    where?: DemanderWhereInput
  }


  /**
   * Demander.products
   */
  export type Demander$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemanderProduct
     */
    select?: DemanderProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderProductInclude<ExtArgs> | null
    where?: DemanderProductWhereInput
    orderBy?: DemanderProductOrderByWithRelationInput | DemanderProductOrderByWithRelationInput[]
    cursor?: DemanderProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DemanderProductScalarFieldEnum | DemanderProductScalarFieldEnum[]
  }


  /**
   * Demander without action
   */
  export type DemanderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Demander
     */
    select?: DemanderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderInclude<ExtArgs> | null
  }



  /**
   * Model DemanderProduct
   */

  export type AggregateDemanderProduct = {
    _count: DemanderProductCountAggregateOutputType | null
    _avg: DemanderProductAvgAggregateOutputType | null
    _sum: DemanderProductSumAggregateOutputType | null
    _min: DemanderProductMinAggregateOutputType | null
    _max: DemanderProductMaxAggregateOutputType | null
  }

  export type DemanderProductAvgAggregateOutputType = {
    id: number | null
    unitPrice: number | null
    totalPrice: number | null
    quantity: number | null
    historicalQuantity: number | null
    demanderId: number | null
  }

  export type DemanderProductSumAggregateOutputType = {
    id: number | null
    unitPrice: number | null
    totalPrice: number | null
    quantity: number | null
    historicalQuantity: number | null
    demanderId: number | null
  }

  export type DemanderProductMinAggregateOutputType = {
    id: number | null
    productName: string | null
    unitPrice: number | null
    totalPrice: number | null
    quantity: number | null
    historicalQuantity: number | null
    createdAt: Date | null
    demanderId: number | null
  }

  export type DemanderProductMaxAggregateOutputType = {
    id: number | null
    productName: string | null
    unitPrice: number | null
    totalPrice: number | null
    quantity: number | null
    historicalQuantity: number | null
    createdAt: Date | null
    demanderId: number | null
  }

  export type DemanderProductCountAggregateOutputType = {
    id: number
    productName: number
    unitPrice: number
    totalPrice: number
    quantity: number
    historicalQuantity: number
    createdAt: number
    demanderId: number
    _all: number
  }


  export type DemanderProductAvgAggregateInputType = {
    id?: true
    unitPrice?: true
    totalPrice?: true
    quantity?: true
    historicalQuantity?: true
    demanderId?: true
  }

  export type DemanderProductSumAggregateInputType = {
    id?: true
    unitPrice?: true
    totalPrice?: true
    quantity?: true
    historicalQuantity?: true
    demanderId?: true
  }

  export type DemanderProductMinAggregateInputType = {
    id?: true
    productName?: true
    unitPrice?: true
    totalPrice?: true
    quantity?: true
    historicalQuantity?: true
    createdAt?: true
    demanderId?: true
  }

  export type DemanderProductMaxAggregateInputType = {
    id?: true
    productName?: true
    unitPrice?: true
    totalPrice?: true
    quantity?: true
    historicalQuantity?: true
    createdAt?: true
    demanderId?: true
  }

  export type DemanderProductCountAggregateInputType = {
    id?: true
    productName?: true
    unitPrice?: true
    totalPrice?: true
    quantity?: true
    historicalQuantity?: true
    createdAt?: true
    demanderId?: true
    _all?: true
  }

  export type DemanderProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DemanderProduct to aggregate.
     */
    where?: DemanderProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DemanderProducts to fetch.
     */
    orderBy?: DemanderProductOrderByWithRelationInput | DemanderProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DemanderProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DemanderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DemanderProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DemanderProducts
    **/
    _count?: true | DemanderProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DemanderProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DemanderProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DemanderProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DemanderProductMaxAggregateInputType
  }

  export type GetDemanderProductAggregateType<T extends DemanderProductAggregateArgs> = {
        [P in keyof T & keyof AggregateDemanderProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDemanderProduct[P]>
      : GetScalarType<T[P], AggregateDemanderProduct[P]>
  }




  export type DemanderProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DemanderProductWhereInput
    orderBy?: DemanderProductOrderByWithAggregationInput | DemanderProductOrderByWithAggregationInput[]
    by: DemanderProductScalarFieldEnum[] | DemanderProductScalarFieldEnum
    having?: DemanderProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DemanderProductCountAggregateInputType | true
    _avg?: DemanderProductAvgAggregateInputType
    _sum?: DemanderProductSumAggregateInputType
    _min?: DemanderProductMinAggregateInputType
    _max?: DemanderProductMaxAggregateInputType
  }

  export type DemanderProductGroupByOutputType = {
    id: number
    productName: string
    unitPrice: number
    totalPrice: number
    quantity: number
    historicalQuantity: number
    createdAt: Date
    demanderId: number
    _count: DemanderProductCountAggregateOutputType | null
    _avg: DemanderProductAvgAggregateOutputType | null
    _sum: DemanderProductSumAggregateOutputType | null
    _min: DemanderProductMinAggregateOutputType | null
    _max: DemanderProductMaxAggregateOutputType | null
  }

  type GetDemanderProductGroupByPayload<T extends DemanderProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DemanderProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DemanderProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DemanderProductGroupByOutputType[P]>
            : GetScalarType<T[P], DemanderProductGroupByOutputType[P]>
        }
      >
    >


  export type DemanderProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productName?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    quantity?: boolean
    historicalQuantity?: boolean
    createdAt?: boolean
    demanderId?: boolean
    demander?: boolean | DemanderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["demanderProduct"]>

  export type DemanderProductSelectScalar = {
    id?: boolean
    productName?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    quantity?: boolean
    historicalQuantity?: boolean
    createdAt?: boolean
    demanderId?: boolean
  }

  export type DemanderProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    demander?: boolean | DemanderDefaultArgs<ExtArgs>
  }


  export type $DemanderProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DemanderProduct"
    objects: {
      demander: Prisma.$DemanderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      productName: string
      unitPrice: number
      totalPrice: number
      quantity: number
      historicalQuantity: number
      createdAt: Date
      demanderId: number
    }, ExtArgs["result"]["demanderProduct"]>
    composites: {}
  }


  type DemanderProductGetPayload<S extends boolean | null | undefined | DemanderProductDefaultArgs> = $Result.GetResult<Prisma.$DemanderProductPayload, S>

  type DemanderProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DemanderProductFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: DemanderProductCountAggregateInputType | true
    }

  export interface DemanderProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DemanderProduct'], meta: { name: 'DemanderProduct' } }
    /**
     * Find zero or one DemanderProduct that matches the filter.
     * @param {DemanderProductFindUniqueArgs} args - Arguments to find a DemanderProduct
     * @example
     * // Get one DemanderProduct
     * const demanderProduct = await prisma.demanderProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DemanderProductFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DemanderProductFindUniqueArgs<ExtArgs>>
    ): Prisma__DemanderProductClient<$Result.GetResult<Prisma.$DemanderProductPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DemanderProduct that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DemanderProductFindUniqueOrThrowArgs} args - Arguments to find a DemanderProduct
     * @example
     * // Get one DemanderProduct
     * const demanderProduct = await prisma.demanderProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DemanderProductFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DemanderProductFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DemanderProductClient<$Result.GetResult<Prisma.$DemanderProductPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DemanderProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemanderProductFindFirstArgs} args - Arguments to find a DemanderProduct
     * @example
     * // Get one DemanderProduct
     * const demanderProduct = await prisma.demanderProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DemanderProductFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DemanderProductFindFirstArgs<ExtArgs>>
    ): Prisma__DemanderProductClient<$Result.GetResult<Prisma.$DemanderProductPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DemanderProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemanderProductFindFirstOrThrowArgs} args - Arguments to find a DemanderProduct
     * @example
     * // Get one DemanderProduct
     * const demanderProduct = await prisma.demanderProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DemanderProductFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DemanderProductFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DemanderProductClient<$Result.GetResult<Prisma.$DemanderProductPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DemanderProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemanderProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DemanderProducts
     * const demanderProducts = await prisma.demanderProduct.findMany()
     * 
     * // Get first 10 DemanderProducts
     * const demanderProducts = await prisma.demanderProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const demanderProductWithIdOnly = await prisma.demanderProduct.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DemanderProductFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DemanderProductFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DemanderProductPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DemanderProduct.
     * @param {DemanderProductCreateArgs} args - Arguments to create a DemanderProduct.
     * @example
     * // Create one DemanderProduct
     * const DemanderProduct = await prisma.demanderProduct.create({
     *   data: {
     *     // ... data to create a DemanderProduct
     *   }
     * })
     * 
    **/
    create<T extends DemanderProductCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DemanderProductCreateArgs<ExtArgs>>
    ): Prisma__DemanderProductClient<$Result.GetResult<Prisma.$DemanderProductPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DemanderProducts.
     *     @param {DemanderProductCreateManyArgs} args - Arguments to create many DemanderProducts.
     *     @example
     *     // Create many DemanderProducts
     *     const demanderProduct = await prisma.demanderProduct.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DemanderProductCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DemanderProductCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DemanderProduct.
     * @param {DemanderProductDeleteArgs} args - Arguments to delete one DemanderProduct.
     * @example
     * // Delete one DemanderProduct
     * const DemanderProduct = await prisma.demanderProduct.delete({
     *   where: {
     *     // ... filter to delete one DemanderProduct
     *   }
     * })
     * 
    **/
    delete<T extends DemanderProductDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DemanderProductDeleteArgs<ExtArgs>>
    ): Prisma__DemanderProductClient<$Result.GetResult<Prisma.$DemanderProductPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DemanderProduct.
     * @param {DemanderProductUpdateArgs} args - Arguments to update one DemanderProduct.
     * @example
     * // Update one DemanderProduct
     * const demanderProduct = await prisma.demanderProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DemanderProductUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DemanderProductUpdateArgs<ExtArgs>>
    ): Prisma__DemanderProductClient<$Result.GetResult<Prisma.$DemanderProductPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DemanderProducts.
     * @param {DemanderProductDeleteManyArgs} args - Arguments to filter DemanderProducts to delete.
     * @example
     * // Delete a few DemanderProducts
     * const { count } = await prisma.demanderProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DemanderProductDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DemanderProductDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DemanderProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemanderProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DemanderProducts
     * const demanderProduct = await prisma.demanderProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DemanderProductUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DemanderProductUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DemanderProduct.
     * @param {DemanderProductUpsertArgs} args - Arguments to update or create a DemanderProduct.
     * @example
     * // Update or create a DemanderProduct
     * const demanderProduct = await prisma.demanderProduct.upsert({
     *   create: {
     *     // ... data to create a DemanderProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DemanderProduct we want to update
     *   }
     * })
    **/
    upsert<T extends DemanderProductUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DemanderProductUpsertArgs<ExtArgs>>
    ): Prisma__DemanderProductClient<$Result.GetResult<Prisma.$DemanderProductPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of DemanderProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemanderProductCountArgs} args - Arguments to filter DemanderProducts to count.
     * @example
     * // Count the number of DemanderProducts
     * const count = await prisma.demanderProduct.count({
     *   where: {
     *     // ... the filter for the DemanderProducts we want to count
     *   }
     * })
    **/
    count<T extends DemanderProductCountArgs>(
      args?: Subset<T, DemanderProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DemanderProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DemanderProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemanderProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DemanderProductAggregateArgs>(args: Subset<T, DemanderProductAggregateArgs>): Prisma.PrismaPromise<GetDemanderProductAggregateType<T>>

    /**
     * Group by DemanderProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DemanderProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DemanderProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DemanderProductGroupByArgs['orderBy'] }
        : { orderBy?: DemanderProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DemanderProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDemanderProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DemanderProduct model
   */
  readonly fields: DemanderProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DemanderProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DemanderProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    demander<T extends DemanderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DemanderDefaultArgs<ExtArgs>>): Prisma__DemanderClient<$Result.GetResult<Prisma.$DemanderPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the DemanderProduct model
   */ 
  interface DemanderProductFieldRefs {
    readonly id: FieldRef<"DemanderProduct", 'Int'>
    readonly productName: FieldRef<"DemanderProduct", 'String'>
    readonly unitPrice: FieldRef<"DemanderProduct", 'Float'>
    readonly totalPrice: FieldRef<"DemanderProduct", 'Float'>
    readonly quantity: FieldRef<"DemanderProduct", 'Int'>
    readonly historicalQuantity: FieldRef<"DemanderProduct", 'Int'>
    readonly createdAt: FieldRef<"DemanderProduct", 'DateTime'>
    readonly demanderId: FieldRef<"DemanderProduct", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * DemanderProduct findUnique
   */
  export type DemanderProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemanderProduct
     */
    select?: DemanderProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderProductInclude<ExtArgs> | null
    /**
     * Filter, which DemanderProduct to fetch.
     */
    where: DemanderProductWhereUniqueInput
  }


  /**
   * DemanderProduct findUniqueOrThrow
   */
  export type DemanderProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemanderProduct
     */
    select?: DemanderProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderProductInclude<ExtArgs> | null
    /**
     * Filter, which DemanderProduct to fetch.
     */
    where: DemanderProductWhereUniqueInput
  }


  /**
   * DemanderProduct findFirst
   */
  export type DemanderProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemanderProduct
     */
    select?: DemanderProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderProductInclude<ExtArgs> | null
    /**
     * Filter, which DemanderProduct to fetch.
     */
    where?: DemanderProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DemanderProducts to fetch.
     */
    orderBy?: DemanderProductOrderByWithRelationInput | DemanderProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DemanderProducts.
     */
    cursor?: DemanderProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DemanderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DemanderProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DemanderProducts.
     */
    distinct?: DemanderProductScalarFieldEnum | DemanderProductScalarFieldEnum[]
  }


  /**
   * DemanderProduct findFirstOrThrow
   */
  export type DemanderProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemanderProduct
     */
    select?: DemanderProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderProductInclude<ExtArgs> | null
    /**
     * Filter, which DemanderProduct to fetch.
     */
    where?: DemanderProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DemanderProducts to fetch.
     */
    orderBy?: DemanderProductOrderByWithRelationInput | DemanderProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DemanderProducts.
     */
    cursor?: DemanderProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DemanderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DemanderProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DemanderProducts.
     */
    distinct?: DemanderProductScalarFieldEnum | DemanderProductScalarFieldEnum[]
  }


  /**
   * DemanderProduct findMany
   */
  export type DemanderProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemanderProduct
     */
    select?: DemanderProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderProductInclude<ExtArgs> | null
    /**
     * Filter, which DemanderProducts to fetch.
     */
    where?: DemanderProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DemanderProducts to fetch.
     */
    orderBy?: DemanderProductOrderByWithRelationInput | DemanderProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DemanderProducts.
     */
    cursor?: DemanderProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DemanderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DemanderProducts.
     */
    skip?: number
    distinct?: DemanderProductScalarFieldEnum | DemanderProductScalarFieldEnum[]
  }


  /**
   * DemanderProduct create
   */
  export type DemanderProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemanderProduct
     */
    select?: DemanderProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderProductInclude<ExtArgs> | null
    /**
     * The data needed to create a DemanderProduct.
     */
    data: XOR<DemanderProductCreateInput, DemanderProductUncheckedCreateInput>
  }


  /**
   * DemanderProduct createMany
   */
  export type DemanderProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DemanderProducts.
     */
    data: DemanderProductCreateManyInput | DemanderProductCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * DemanderProduct update
   */
  export type DemanderProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemanderProduct
     */
    select?: DemanderProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderProductInclude<ExtArgs> | null
    /**
     * The data needed to update a DemanderProduct.
     */
    data: XOR<DemanderProductUpdateInput, DemanderProductUncheckedUpdateInput>
    /**
     * Choose, which DemanderProduct to update.
     */
    where: DemanderProductWhereUniqueInput
  }


  /**
   * DemanderProduct updateMany
   */
  export type DemanderProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DemanderProducts.
     */
    data: XOR<DemanderProductUpdateManyMutationInput, DemanderProductUncheckedUpdateManyInput>
    /**
     * Filter which DemanderProducts to update
     */
    where?: DemanderProductWhereInput
  }


  /**
   * DemanderProduct upsert
   */
  export type DemanderProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemanderProduct
     */
    select?: DemanderProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderProductInclude<ExtArgs> | null
    /**
     * The filter to search for the DemanderProduct to update in case it exists.
     */
    where: DemanderProductWhereUniqueInput
    /**
     * In case the DemanderProduct found by the `where` argument doesn't exist, create a new DemanderProduct with this data.
     */
    create: XOR<DemanderProductCreateInput, DemanderProductUncheckedCreateInput>
    /**
     * In case the DemanderProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DemanderProductUpdateInput, DemanderProductUncheckedUpdateInput>
  }


  /**
   * DemanderProduct delete
   */
  export type DemanderProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemanderProduct
     */
    select?: DemanderProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderProductInclude<ExtArgs> | null
    /**
     * Filter which DemanderProduct to delete.
     */
    where: DemanderProductWhereUniqueInput
  }


  /**
   * DemanderProduct deleteMany
   */
  export type DemanderProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DemanderProducts to delete
     */
    where?: DemanderProductWhereInput
  }


  /**
   * DemanderProduct without action
   */
  export type DemanderProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DemanderProduct
     */
    select?: DemanderProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DemanderProductInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SupplierScalarFieldEnum: {
    id: 'id',
    userType: 'userType',
    email: 'email',
    organizationName: 'organizationName',
    address: 'address'
  };

  export type SupplierScalarFieldEnum = (typeof SupplierScalarFieldEnum)[keyof typeof SupplierScalarFieldEnum]


  export const SupplierProductScalarFieldEnum: {
    id: 'id',
    productName: 'productName',
    unitPrice: 'unitPrice',
    totalPrice: 'totalPrice',
    quantity: 'quantity',
    historicalQuantity: 'historicalQuantity',
    createdAt: 'createdAt',
    supplierId: 'supplierId'
  };

  export type SupplierProductScalarFieldEnum = (typeof SupplierProductScalarFieldEnum)[keyof typeof SupplierProductScalarFieldEnum]


  export const DemanderScalarFieldEnum: {
    id: 'id',
    userType: 'userType',
    email: 'email',
    organizationName: 'organizationName',
    address: 'address'
  };

  export type DemanderScalarFieldEnum = (typeof DemanderScalarFieldEnum)[keyof typeof DemanderScalarFieldEnum]


  export const DemanderProductScalarFieldEnum: {
    id: 'id',
    productName: 'productName',
    unitPrice: 'unitPrice',
    totalPrice: 'totalPrice',
    quantity: 'quantity',
    historicalQuantity: 'historicalQuantity',
    createdAt: 'createdAt',
    demanderId: 'demanderId'
  };

  export type DemanderProductScalarFieldEnum = (typeof DemanderProductScalarFieldEnum)[keyof typeof DemanderProductScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    
  /**
   * Deep Input Types
   */


  export type SupplierWhereInput = {
    AND?: SupplierWhereInput | SupplierWhereInput[]
    OR?: SupplierWhereInput[]
    NOT?: SupplierWhereInput | SupplierWhereInput[]
    id?: IntFilter<"Supplier"> | number
    userType?: StringFilter<"Supplier"> | string
    email?: StringFilter<"Supplier"> | string
    organizationName?: StringFilter<"Supplier"> | string
    address?: StringFilter<"Supplier"> | string
    products?: SupplierProductListRelationFilter
  }

  export type SupplierOrderByWithRelationInput = {
    id?: SortOrder
    userType?: SortOrder
    email?: SortOrder
    organizationName?: SortOrder
    address?: SortOrder
    products?: SupplierProductOrderByRelationAggregateInput
  }

  export type SupplierWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: SupplierWhereInput | SupplierWhereInput[]
    OR?: SupplierWhereInput[]
    NOT?: SupplierWhereInput | SupplierWhereInput[]
    userType?: StringFilter<"Supplier"> | string
    organizationName?: StringFilter<"Supplier"> | string
    address?: StringFilter<"Supplier"> | string
    products?: SupplierProductListRelationFilter
  }, "id" | "email">

  export type SupplierOrderByWithAggregationInput = {
    id?: SortOrder
    userType?: SortOrder
    email?: SortOrder
    organizationName?: SortOrder
    address?: SortOrder
    _count?: SupplierCountOrderByAggregateInput
    _avg?: SupplierAvgOrderByAggregateInput
    _max?: SupplierMaxOrderByAggregateInput
    _min?: SupplierMinOrderByAggregateInput
    _sum?: SupplierSumOrderByAggregateInput
  }

  export type SupplierScalarWhereWithAggregatesInput = {
    AND?: SupplierScalarWhereWithAggregatesInput | SupplierScalarWhereWithAggregatesInput[]
    OR?: SupplierScalarWhereWithAggregatesInput[]
    NOT?: SupplierScalarWhereWithAggregatesInput | SupplierScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Supplier"> | number
    userType?: StringWithAggregatesFilter<"Supplier"> | string
    email?: StringWithAggregatesFilter<"Supplier"> | string
    organizationName?: StringWithAggregatesFilter<"Supplier"> | string
    address?: StringWithAggregatesFilter<"Supplier"> | string
  }

  export type SupplierProductWhereInput = {
    AND?: SupplierProductWhereInput | SupplierProductWhereInput[]
    OR?: SupplierProductWhereInput[]
    NOT?: SupplierProductWhereInput | SupplierProductWhereInput[]
    id?: IntFilter<"SupplierProduct"> | number
    productName?: StringFilter<"SupplierProduct"> | string
    unitPrice?: FloatFilter<"SupplierProduct"> | number
    totalPrice?: FloatFilter<"SupplierProduct"> | number
    quantity?: IntFilter<"SupplierProduct"> | number
    historicalQuantity?: IntFilter<"SupplierProduct"> | number
    createdAt?: DateTimeFilter<"SupplierProduct"> | Date | string
    supplierId?: IntFilter<"SupplierProduct"> | number
    supplier?: XOR<SupplierRelationFilter, SupplierWhereInput>
  }

  export type SupplierProductOrderByWithRelationInput = {
    id?: SortOrder
    productName?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    quantity?: SortOrder
    historicalQuantity?: SortOrder
    createdAt?: SortOrder
    supplierId?: SortOrder
    supplier?: SupplierOrderByWithRelationInput
  }

  export type SupplierProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SupplierProductWhereInput | SupplierProductWhereInput[]
    OR?: SupplierProductWhereInput[]
    NOT?: SupplierProductWhereInput | SupplierProductWhereInput[]
    productName?: StringFilter<"SupplierProduct"> | string
    unitPrice?: FloatFilter<"SupplierProduct"> | number
    totalPrice?: FloatFilter<"SupplierProduct"> | number
    quantity?: IntFilter<"SupplierProduct"> | number
    historicalQuantity?: IntFilter<"SupplierProduct"> | number
    createdAt?: DateTimeFilter<"SupplierProduct"> | Date | string
    supplierId?: IntFilter<"SupplierProduct"> | number
    supplier?: XOR<SupplierRelationFilter, SupplierWhereInput>
  }, "id">

  export type SupplierProductOrderByWithAggregationInput = {
    id?: SortOrder
    productName?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    quantity?: SortOrder
    historicalQuantity?: SortOrder
    createdAt?: SortOrder
    supplierId?: SortOrder
    _count?: SupplierProductCountOrderByAggregateInput
    _avg?: SupplierProductAvgOrderByAggregateInput
    _max?: SupplierProductMaxOrderByAggregateInput
    _min?: SupplierProductMinOrderByAggregateInput
    _sum?: SupplierProductSumOrderByAggregateInput
  }

  export type SupplierProductScalarWhereWithAggregatesInput = {
    AND?: SupplierProductScalarWhereWithAggregatesInput | SupplierProductScalarWhereWithAggregatesInput[]
    OR?: SupplierProductScalarWhereWithAggregatesInput[]
    NOT?: SupplierProductScalarWhereWithAggregatesInput | SupplierProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SupplierProduct"> | number
    productName?: StringWithAggregatesFilter<"SupplierProduct"> | string
    unitPrice?: FloatWithAggregatesFilter<"SupplierProduct"> | number
    totalPrice?: FloatWithAggregatesFilter<"SupplierProduct"> | number
    quantity?: IntWithAggregatesFilter<"SupplierProduct"> | number
    historicalQuantity?: IntWithAggregatesFilter<"SupplierProduct"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SupplierProduct"> | Date | string
    supplierId?: IntWithAggregatesFilter<"SupplierProduct"> | number
  }

  export type DemanderWhereInput = {
    AND?: DemanderWhereInput | DemanderWhereInput[]
    OR?: DemanderWhereInput[]
    NOT?: DemanderWhereInput | DemanderWhereInput[]
    id?: IntFilter<"Demander"> | number
    userType?: StringFilter<"Demander"> | string
    email?: StringFilter<"Demander"> | string
    organizationName?: StringFilter<"Demander"> | string
    address?: StringFilter<"Demander"> | string
    products?: DemanderProductListRelationFilter
  }

  export type DemanderOrderByWithRelationInput = {
    id?: SortOrder
    userType?: SortOrder
    email?: SortOrder
    organizationName?: SortOrder
    address?: SortOrder
    products?: DemanderProductOrderByRelationAggregateInput
  }

  export type DemanderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: DemanderWhereInput | DemanderWhereInput[]
    OR?: DemanderWhereInput[]
    NOT?: DemanderWhereInput | DemanderWhereInput[]
    userType?: StringFilter<"Demander"> | string
    organizationName?: StringFilter<"Demander"> | string
    address?: StringFilter<"Demander"> | string
    products?: DemanderProductListRelationFilter
  }, "id" | "email">

  export type DemanderOrderByWithAggregationInput = {
    id?: SortOrder
    userType?: SortOrder
    email?: SortOrder
    organizationName?: SortOrder
    address?: SortOrder
    _count?: DemanderCountOrderByAggregateInput
    _avg?: DemanderAvgOrderByAggregateInput
    _max?: DemanderMaxOrderByAggregateInput
    _min?: DemanderMinOrderByAggregateInput
    _sum?: DemanderSumOrderByAggregateInput
  }

  export type DemanderScalarWhereWithAggregatesInput = {
    AND?: DemanderScalarWhereWithAggregatesInput | DemanderScalarWhereWithAggregatesInput[]
    OR?: DemanderScalarWhereWithAggregatesInput[]
    NOT?: DemanderScalarWhereWithAggregatesInput | DemanderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Demander"> | number
    userType?: StringWithAggregatesFilter<"Demander"> | string
    email?: StringWithAggregatesFilter<"Demander"> | string
    organizationName?: StringWithAggregatesFilter<"Demander"> | string
    address?: StringWithAggregatesFilter<"Demander"> | string
  }

  export type DemanderProductWhereInput = {
    AND?: DemanderProductWhereInput | DemanderProductWhereInput[]
    OR?: DemanderProductWhereInput[]
    NOT?: DemanderProductWhereInput | DemanderProductWhereInput[]
    id?: IntFilter<"DemanderProduct"> | number
    productName?: StringFilter<"DemanderProduct"> | string
    unitPrice?: FloatFilter<"DemanderProduct"> | number
    totalPrice?: FloatFilter<"DemanderProduct"> | number
    quantity?: IntFilter<"DemanderProduct"> | number
    historicalQuantity?: IntFilter<"DemanderProduct"> | number
    createdAt?: DateTimeFilter<"DemanderProduct"> | Date | string
    demanderId?: IntFilter<"DemanderProduct"> | number
    demander?: XOR<DemanderRelationFilter, DemanderWhereInput>
  }

  export type DemanderProductOrderByWithRelationInput = {
    id?: SortOrder
    productName?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    quantity?: SortOrder
    historicalQuantity?: SortOrder
    createdAt?: SortOrder
    demanderId?: SortOrder
    demander?: DemanderOrderByWithRelationInput
  }

  export type DemanderProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DemanderProductWhereInput | DemanderProductWhereInput[]
    OR?: DemanderProductWhereInput[]
    NOT?: DemanderProductWhereInput | DemanderProductWhereInput[]
    productName?: StringFilter<"DemanderProduct"> | string
    unitPrice?: FloatFilter<"DemanderProduct"> | number
    totalPrice?: FloatFilter<"DemanderProduct"> | number
    quantity?: IntFilter<"DemanderProduct"> | number
    historicalQuantity?: IntFilter<"DemanderProduct"> | number
    createdAt?: DateTimeFilter<"DemanderProduct"> | Date | string
    demanderId?: IntFilter<"DemanderProduct"> | number
    demander?: XOR<DemanderRelationFilter, DemanderWhereInput>
  }, "id">

  export type DemanderProductOrderByWithAggregationInput = {
    id?: SortOrder
    productName?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    quantity?: SortOrder
    historicalQuantity?: SortOrder
    createdAt?: SortOrder
    demanderId?: SortOrder
    _count?: DemanderProductCountOrderByAggregateInput
    _avg?: DemanderProductAvgOrderByAggregateInput
    _max?: DemanderProductMaxOrderByAggregateInput
    _min?: DemanderProductMinOrderByAggregateInput
    _sum?: DemanderProductSumOrderByAggregateInput
  }

  export type DemanderProductScalarWhereWithAggregatesInput = {
    AND?: DemanderProductScalarWhereWithAggregatesInput | DemanderProductScalarWhereWithAggregatesInput[]
    OR?: DemanderProductScalarWhereWithAggregatesInput[]
    NOT?: DemanderProductScalarWhereWithAggregatesInput | DemanderProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DemanderProduct"> | number
    productName?: StringWithAggregatesFilter<"DemanderProduct"> | string
    unitPrice?: FloatWithAggregatesFilter<"DemanderProduct"> | number
    totalPrice?: FloatWithAggregatesFilter<"DemanderProduct"> | number
    quantity?: IntWithAggregatesFilter<"DemanderProduct"> | number
    historicalQuantity?: IntWithAggregatesFilter<"DemanderProduct"> | number
    createdAt?: DateTimeWithAggregatesFilter<"DemanderProduct"> | Date | string
    demanderId?: IntWithAggregatesFilter<"DemanderProduct"> | number
  }

  export type SupplierCreateInput = {
    userType?: string
    email: string
    organizationName: string
    address: string
    products?: SupplierProductCreateNestedManyWithoutSupplierInput
  }

  export type SupplierUncheckedCreateInput = {
    id?: number
    userType?: string
    email: string
    organizationName: string
    address: string
    products?: SupplierProductUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SupplierUpdateInput = {
    userType?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organizationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    products?: SupplierProductUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userType?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organizationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    products?: SupplierProductUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierCreateManyInput = {
    id?: number
    userType?: string
    email: string
    organizationName: string
    address: string
  }

  export type SupplierUpdateManyMutationInput = {
    userType?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organizationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type SupplierUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userType?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organizationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type SupplierProductCreateInput = {
    productName: string
    unitPrice: number
    totalPrice: number
    quantity: number
    historicalQuantity: number
    createdAt?: Date | string
    supplier: SupplierCreateNestedOneWithoutProductsInput
  }

  export type SupplierProductUncheckedCreateInput = {
    id?: number
    productName: string
    unitPrice: number
    totalPrice: number
    quantity: number
    historicalQuantity: number
    createdAt?: Date | string
    supplierId: number
  }

  export type SupplierProductUpdateInput = {
    productName?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    historicalQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUpdateOneRequiredWithoutProductsNestedInput
  }

  export type SupplierProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    historicalQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplierId?: IntFieldUpdateOperationsInput | number
  }

  export type SupplierProductCreateManyInput = {
    id?: number
    productName: string
    unitPrice: number
    totalPrice: number
    quantity: number
    historicalQuantity: number
    createdAt?: Date | string
    supplierId: number
  }

  export type SupplierProductUpdateManyMutationInput = {
    productName?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    historicalQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    historicalQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplierId?: IntFieldUpdateOperationsInput | number
  }

  export type DemanderCreateInput = {
    userType?: string
    email: string
    organizationName: string
    address: string
    products?: DemanderProductCreateNestedManyWithoutDemanderInput
  }

  export type DemanderUncheckedCreateInput = {
    id?: number
    userType?: string
    email: string
    organizationName: string
    address: string
    products?: DemanderProductUncheckedCreateNestedManyWithoutDemanderInput
  }

  export type DemanderUpdateInput = {
    userType?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organizationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    products?: DemanderProductUpdateManyWithoutDemanderNestedInput
  }

  export type DemanderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userType?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organizationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    products?: DemanderProductUncheckedUpdateManyWithoutDemanderNestedInput
  }

  export type DemanderCreateManyInput = {
    id?: number
    userType?: string
    email: string
    organizationName: string
    address: string
  }

  export type DemanderUpdateManyMutationInput = {
    userType?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organizationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type DemanderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userType?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organizationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type DemanderProductCreateInput = {
    productName: string
    unitPrice: number
    totalPrice: number
    quantity: number
    historicalQuantity: number
    createdAt?: Date | string
    demander: DemanderCreateNestedOneWithoutProductsInput
  }

  export type DemanderProductUncheckedCreateInput = {
    id?: number
    productName: string
    unitPrice: number
    totalPrice: number
    quantity: number
    historicalQuantity: number
    createdAt?: Date | string
    demanderId: number
  }

  export type DemanderProductUpdateInput = {
    productName?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    historicalQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    demander?: DemanderUpdateOneRequiredWithoutProductsNestedInput
  }

  export type DemanderProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    historicalQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    demanderId?: IntFieldUpdateOperationsInput | number
  }

  export type DemanderProductCreateManyInput = {
    id?: number
    productName: string
    unitPrice: number
    totalPrice: number
    quantity: number
    historicalQuantity: number
    createdAt?: Date | string
    demanderId: number
  }

  export type DemanderProductUpdateManyMutationInput = {
    productName?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    historicalQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DemanderProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    historicalQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    demanderId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type SupplierProductListRelationFilter = {
    every?: SupplierProductWhereInput
    some?: SupplierProductWhereInput
    none?: SupplierProductWhereInput
  }

  export type SupplierProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SupplierCountOrderByAggregateInput = {
    id?: SortOrder
    userType?: SortOrder
    email?: SortOrder
    organizationName?: SortOrder
    address?: SortOrder
  }

  export type SupplierAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SupplierMaxOrderByAggregateInput = {
    id?: SortOrder
    userType?: SortOrder
    email?: SortOrder
    organizationName?: SortOrder
    address?: SortOrder
  }

  export type SupplierMinOrderByAggregateInput = {
    id?: SortOrder
    userType?: SortOrder
    email?: SortOrder
    organizationName?: SortOrder
    address?: SortOrder
  }

  export type SupplierSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SupplierRelationFilter = {
    is?: SupplierWhereInput
    isNot?: SupplierWhereInput
  }

  export type SupplierProductCountOrderByAggregateInput = {
    id?: SortOrder
    productName?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    quantity?: SortOrder
    historicalQuantity?: SortOrder
    createdAt?: SortOrder
    supplierId?: SortOrder
  }

  export type SupplierProductAvgOrderByAggregateInput = {
    id?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    quantity?: SortOrder
    historicalQuantity?: SortOrder
    supplierId?: SortOrder
  }

  export type SupplierProductMaxOrderByAggregateInput = {
    id?: SortOrder
    productName?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    quantity?: SortOrder
    historicalQuantity?: SortOrder
    createdAt?: SortOrder
    supplierId?: SortOrder
  }

  export type SupplierProductMinOrderByAggregateInput = {
    id?: SortOrder
    productName?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    quantity?: SortOrder
    historicalQuantity?: SortOrder
    createdAt?: SortOrder
    supplierId?: SortOrder
  }

  export type SupplierProductSumOrderByAggregateInput = {
    id?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    quantity?: SortOrder
    historicalQuantity?: SortOrder
    supplierId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DemanderProductListRelationFilter = {
    every?: DemanderProductWhereInput
    some?: DemanderProductWhereInput
    none?: DemanderProductWhereInput
  }

  export type DemanderProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DemanderCountOrderByAggregateInput = {
    id?: SortOrder
    userType?: SortOrder
    email?: SortOrder
    organizationName?: SortOrder
    address?: SortOrder
  }

  export type DemanderAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DemanderMaxOrderByAggregateInput = {
    id?: SortOrder
    userType?: SortOrder
    email?: SortOrder
    organizationName?: SortOrder
    address?: SortOrder
  }

  export type DemanderMinOrderByAggregateInput = {
    id?: SortOrder
    userType?: SortOrder
    email?: SortOrder
    organizationName?: SortOrder
    address?: SortOrder
  }

  export type DemanderSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DemanderRelationFilter = {
    is?: DemanderWhereInput
    isNot?: DemanderWhereInput
  }

  export type DemanderProductCountOrderByAggregateInput = {
    id?: SortOrder
    productName?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    quantity?: SortOrder
    historicalQuantity?: SortOrder
    createdAt?: SortOrder
    demanderId?: SortOrder
  }

  export type DemanderProductAvgOrderByAggregateInput = {
    id?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    quantity?: SortOrder
    historicalQuantity?: SortOrder
    demanderId?: SortOrder
  }

  export type DemanderProductMaxOrderByAggregateInput = {
    id?: SortOrder
    productName?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    quantity?: SortOrder
    historicalQuantity?: SortOrder
    createdAt?: SortOrder
    demanderId?: SortOrder
  }

  export type DemanderProductMinOrderByAggregateInput = {
    id?: SortOrder
    productName?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    quantity?: SortOrder
    historicalQuantity?: SortOrder
    createdAt?: SortOrder
    demanderId?: SortOrder
  }

  export type DemanderProductSumOrderByAggregateInput = {
    id?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    quantity?: SortOrder
    historicalQuantity?: SortOrder
    demanderId?: SortOrder
  }

  export type SupplierProductCreateNestedManyWithoutSupplierInput = {
    create?: XOR<SupplierProductCreateWithoutSupplierInput, SupplierProductUncheckedCreateWithoutSupplierInput> | SupplierProductCreateWithoutSupplierInput[] | SupplierProductUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: SupplierProductCreateOrConnectWithoutSupplierInput | SupplierProductCreateOrConnectWithoutSupplierInput[]
    createMany?: SupplierProductCreateManySupplierInputEnvelope
    connect?: SupplierProductWhereUniqueInput | SupplierProductWhereUniqueInput[]
  }

  export type SupplierProductUncheckedCreateNestedManyWithoutSupplierInput = {
    create?: XOR<SupplierProductCreateWithoutSupplierInput, SupplierProductUncheckedCreateWithoutSupplierInput> | SupplierProductCreateWithoutSupplierInput[] | SupplierProductUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: SupplierProductCreateOrConnectWithoutSupplierInput | SupplierProductCreateOrConnectWithoutSupplierInput[]
    createMany?: SupplierProductCreateManySupplierInputEnvelope
    connect?: SupplierProductWhereUniqueInput | SupplierProductWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type SupplierProductUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<SupplierProductCreateWithoutSupplierInput, SupplierProductUncheckedCreateWithoutSupplierInput> | SupplierProductCreateWithoutSupplierInput[] | SupplierProductUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: SupplierProductCreateOrConnectWithoutSupplierInput | SupplierProductCreateOrConnectWithoutSupplierInput[]
    upsert?: SupplierProductUpsertWithWhereUniqueWithoutSupplierInput | SupplierProductUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: SupplierProductCreateManySupplierInputEnvelope
    set?: SupplierProductWhereUniqueInput | SupplierProductWhereUniqueInput[]
    disconnect?: SupplierProductWhereUniqueInput | SupplierProductWhereUniqueInput[]
    delete?: SupplierProductWhereUniqueInput | SupplierProductWhereUniqueInput[]
    connect?: SupplierProductWhereUniqueInput | SupplierProductWhereUniqueInput[]
    update?: SupplierProductUpdateWithWhereUniqueWithoutSupplierInput | SupplierProductUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: SupplierProductUpdateManyWithWhereWithoutSupplierInput | SupplierProductUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: SupplierProductScalarWhereInput | SupplierProductScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SupplierProductUncheckedUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<SupplierProductCreateWithoutSupplierInput, SupplierProductUncheckedCreateWithoutSupplierInput> | SupplierProductCreateWithoutSupplierInput[] | SupplierProductUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: SupplierProductCreateOrConnectWithoutSupplierInput | SupplierProductCreateOrConnectWithoutSupplierInput[]
    upsert?: SupplierProductUpsertWithWhereUniqueWithoutSupplierInput | SupplierProductUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: SupplierProductCreateManySupplierInputEnvelope
    set?: SupplierProductWhereUniqueInput | SupplierProductWhereUniqueInput[]
    disconnect?: SupplierProductWhereUniqueInput | SupplierProductWhereUniqueInput[]
    delete?: SupplierProductWhereUniqueInput | SupplierProductWhereUniqueInput[]
    connect?: SupplierProductWhereUniqueInput | SupplierProductWhereUniqueInput[]
    update?: SupplierProductUpdateWithWhereUniqueWithoutSupplierInput | SupplierProductUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: SupplierProductUpdateManyWithWhereWithoutSupplierInput | SupplierProductUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: SupplierProductScalarWhereInput | SupplierProductScalarWhereInput[]
  }

  export type SupplierCreateNestedOneWithoutProductsInput = {
    create?: XOR<SupplierCreateWithoutProductsInput, SupplierUncheckedCreateWithoutProductsInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutProductsInput
    connect?: SupplierWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SupplierUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<SupplierCreateWithoutProductsInput, SupplierUncheckedCreateWithoutProductsInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutProductsInput
    upsert?: SupplierUpsertWithoutProductsInput
    connect?: SupplierWhereUniqueInput
    update?: XOR<XOR<SupplierUpdateToOneWithWhereWithoutProductsInput, SupplierUpdateWithoutProductsInput>, SupplierUncheckedUpdateWithoutProductsInput>
  }

  export type DemanderProductCreateNestedManyWithoutDemanderInput = {
    create?: XOR<DemanderProductCreateWithoutDemanderInput, DemanderProductUncheckedCreateWithoutDemanderInput> | DemanderProductCreateWithoutDemanderInput[] | DemanderProductUncheckedCreateWithoutDemanderInput[]
    connectOrCreate?: DemanderProductCreateOrConnectWithoutDemanderInput | DemanderProductCreateOrConnectWithoutDemanderInput[]
    createMany?: DemanderProductCreateManyDemanderInputEnvelope
    connect?: DemanderProductWhereUniqueInput | DemanderProductWhereUniqueInput[]
  }

  export type DemanderProductUncheckedCreateNestedManyWithoutDemanderInput = {
    create?: XOR<DemanderProductCreateWithoutDemanderInput, DemanderProductUncheckedCreateWithoutDemanderInput> | DemanderProductCreateWithoutDemanderInput[] | DemanderProductUncheckedCreateWithoutDemanderInput[]
    connectOrCreate?: DemanderProductCreateOrConnectWithoutDemanderInput | DemanderProductCreateOrConnectWithoutDemanderInput[]
    createMany?: DemanderProductCreateManyDemanderInputEnvelope
    connect?: DemanderProductWhereUniqueInput | DemanderProductWhereUniqueInput[]
  }

  export type DemanderProductUpdateManyWithoutDemanderNestedInput = {
    create?: XOR<DemanderProductCreateWithoutDemanderInput, DemanderProductUncheckedCreateWithoutDemanderInput> | DemanderProductCreateWithoutDemanderInput[] | DemanderProductUncheckedCreateWithoutDemanderInput[]
    connectOrCreate?: DemanderProductCreateOrConnectWithoutDemanderInput | DemanderProductCreateOrConnectWithoutDemanderInput[]
    upsert?: DemanderProductUpsertWithWhereUniqueWithoutDemanderInput | DemanderProductUpsertWithWhereUniqueWithoutDemanderInput[]
    createMany?: DemanderProductCreateManyDemanderInputEnvelope
    set?: DemanderProductWhereUniqueInput | DemanderProductWhereUniqueInput[]
    disconnect?: DemanderProductWhereUniqueInput | DemanderProductWhereUniqueInput[]
    delete?: DemanderProductWhereUniqueInput | DemanderProductWhereUniqueInput[]
    connect?: DemanderProductWhereUniqueInput | DemanderProductWhereUniqueInput[]
    update?: DemanderProductUpdateWithWhereUniqueWithoutDemanderInput | DemanderProductUpdateWithWhereUniqueWithoutDemanderInput[]
    updateMany?: DemanderProductUpdateManyWithWhereWithoutDemanderInput | DemanderProductUpdateManyWithWhereWithoutDemanderInput[]
    deleteMany?: DemanderProductScalarWhereInput | DemanderProductScalarWhereInput[]
  }

  export type DemanderProductUncheckedUpdateManyWithoutDemanderNestedInput = {
    create?: XOR<DemanderProductCreateWithoutDemanderInput, DemanderProductUncheckedCreateWithoutDemanderInput> | DemanderProductCreateWithoutDemanderInput[] | DemanderProductUncheckedCreateWithoutDemanderInput[]
    connectOrCreate?: DemanderProductCreateOrConnectWithoutDemanderInput | DemanderProductCreateOrConnectWithoutDemanderInput[]
    upsert?: DemanderProductUpsertWithWhereUniqueWithoutDemanderInput | DemanderProductUpsertWithWhereUniqueWithoutDemanderInput[]
    createMany?: DemanderProductCreateManyDemanderInputEnvelope
    set?: DemanderProductWhereUniqueInput | DemanderProductWhereUniqueInput[]
    disconnect?: DemanderProductWhereUniqueInput | DemanderProductWhereUniqueInput[]
    delete?: DemanderProductWhereUniqueInput | DemanderProductWhereUniqueInput[]
    connect?: DemanderProductWhereUniqueInput | DemanderProductWhereUniqueInput[]
    update?: DemanderProductUpdateWithWhereUniqueWithoutDemanderInput | DemanderProductUpdateWithWhereUniqueWithoutDemanderInput[]
    updateMany?: DemanderProductUpdateManyWithWhereWithoutDemanderInput | DemanderProductUpdateManyWithWhereWithoutDemanderInput[]
    deleteMany?: DemanderProductScalarWhereInput | DemanderProductScalarWhereInput[]
  }

  export type DemanderCreateNestedOneWithoutProductsInput = {
    create?: XOR<DemanderCreateWithoutProductsInput, DemanderUncheckedCreateWithoutProductsInput>
    connectOrCreate?: DemanderCreateOrConnectWithoutProductsInput
    connect?: DemanderWhereUniqueInput
  }

  export type DemanderUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<DemanderCreateWithoutProductsInput, DemanderUncheckedCreateWithoutProductsInput>
    connectOrCreate?: DemanderCreateOrConnectWithoutProductsInput
    upsert?: DemanderUpsertWithoutProductsInput
    connect?: DemanderWhereUniqueInput
    update?: XOR<XOR<DemanderUpdateToOneWithWhereWithoutProductsInput, DemanderUpdateWithoutProductsInput>, DemanderUncheckedUpdateWithoutProductsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type SupplierProductCreateWithoutSupplierInput = {
    productName: string
    unitPrice: number
    totalPrice: number
    quantity: number
    historicalQuantity: number
    createdAt?: Date | string
  }

  export type SupplierProductUncheckedCreateWithoutSupplierInput = {
    id?: number
    productName: string
    unitPrice: number
    totalPrice: number
    quantity: number
    historicalQuantity: number
    createdAt?: Date | string
  }

  export type SupplierProductCreateOrConnectWithoutSupplierInput = {
    where: SupplierProductWhereUniqueInput
    create: XOR<SupplierProductCreateWithoutSupplierInput, SupplierProductUncheckedCreateWithoutSupplierInput>
  }

  export type SupplierProductCreateManySupplierInputEnvelope = {
    data: SupplierProductCreateManySupplierInput | SupplierProductCreateManySupplierInput[]
    skipDuplicates?: boolean
  }

  export type SupplierProductUpsertWithWhereUniqueWithoutSupplierInput = {
    where: SupplierProductWhereUniqueInput
    update: XOR<SupplierProductUpdateWithoutSupplierInput, SupplierProductUncheckedUpdateWithoutSupplierInput>
    create: XOR<SupplierProductCreateWithoutSupplierInput, SupplierProductUncheckedCreateWithoutSupplierInput>
  }

  export type SupplierProductUpdateWithWhereUniqueWithoutSupplierInput = {
    where: SupplierProductWhereUniqueInput
    data: XOR<SupplierProductUpdateWithoutSupplierInput, SupplierProductUncheckedUpdateWithoutSupplierInput>
  }

  export type SupplierProductUpdateManyWithWhereWithoutSupplierInput = {
    where: SupplierProductScalarWhereInput
    data: XOR<SupplierProductUpdateManyMutationInput, SupplierProductUncheckedUpdateManyWithoutSupplierInput>
  }

  export type SupplierProductScalarWhereInput = {
    AND?: SupplierProductScalarWhereInput | SupplierProductScalarWhereInput[]
    OR?: SupplierProductScalarWhereInput[]
    NOT?: SupplierProductScalarWhereInput | SupplierProductScalarWhereInput[]
    id?: IntFilter<"SupplierProduct"> | number
    productName?: StringFilter<"SupplierProduct"> | string
    unitPrice?: FloatFilter<"SupplierProduct"> | number
    totalPrice?: FloatFilter<"SupplierProduct"> | number
    quantity?: IntFilter<"SupplierProduct"> | number
    historicalQuantity?: IntFilter<"SupplierProduct"> | number
    createdAt?: DateTimeFilter<"SupplierProduct"> | Date | string
    supplierId?: IntFilter<"SupplierProduct"> | number
  }

  export type SupplierCreateWithoutProductsInput = {
    userType?: string
    email: string
    organizationName: string
    address: string
  }

  export type SupplierUncheckedCreateWithoutProductsInput = {
    id?: number
    userType?: string
    email: string
    organizationName: string
    address: string
  }

  export type SupplierCreateOrConnectWithoutProductsInput = {
    where: SupplierWhereUniqueInput
    create: XOR<SupplierCreateWithoutProductsInput, SupplierUncheckedCreateWithoutProductsInput>
  }

  export type SupplierUpsertWithoutProductsInput = {
    update: XOR<SupplierUpdateWithoutProductsInput, SupplierUncheckedUpdateWithoutProductsInput>
    create: XOR<SupplierCreateWithoutProductsInput, SupplierUncheckedCreateWithoutProductsInput>
    where?: SupplierWhereInput
  }

  export type SupplierUpdateToOneWithWhereWithoutProductsInput = {
    where?: SupplierWhereInput
    data: XOR<SupplierUpdateWithoutProductsInput, SupplierUncheckedUpdateWithoutProductsInput>
  }

  export type SupplierUpdateWithoutProductsInput = {
    userType?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organizationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type SupplierUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userType?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organizationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type DemanderProductCreateWithoutDemanderInput = {
    productName: string
    unitPrice: number
    totalPrice: number
    quantity: number
    historicalQuantity: number
    createdAt?: Date | string
  }

  export type DemanderProductUncheckedCreateWithoutDemanderInput = {
    id?: number
    productName: string
    unitPrice: number
    totalPrice: number
    quantity: number
    historicalQuantity: number
    createdAt?: Date | string
  }

  export type DemanderProductCreateOrConnectWithoutDemanderInput = {
    where: DemanderProductWhereUniqueInput
    create: XOR<DemanderProductCreateWithoutDemanderInput, DemanderProductUncheckedCreateWithoutDemanderInput>
  }

  export type DemanderProductCreateManyDemanderInputEnvelope = {
    data: DemanderProductCreateManyDemanderInput | DemanderProductCreateManyDemanderInput[]
    skipDuplicates?: boolean
  }

  export type DemanderProductUpsertWithWhereUniqueWithoutDemanderInput = {
    where: DemanderProductWhereUniqueInput
    update: XOR<DemanderProductUpdateWithoutDemanderInput, DemanderProductUncheckedUpdateWithoutDemanderInput>
    create: XOR<DemanderProductCreateWithoutDemanderInput, DemanderProductUncheckedCreateWithoutDemanderInput>
  }

  export type DemanderProductUpdateWithWhereUniqueWithoutDemanderInput = {
    where: DemanderProductWhereUniqueInput
    data: XOR<DemanderProductUpdateWithoutDemanderInput, DemanderProductUncheckedUpdateWithoutDemanderInput>
  }

  export type DemanderProductUpdateManyWithWhereWithoutDemanderInput = {
    where: DemanderProductScalarWhereInput
    data: XOR<DemanderProductUpdateManyMutationInput, DemanderProductUncheckedUpdateManyWithoutDemanderInput>
  }

  export type DemanderProductScalarWhereInput = {
    AND?: DemanderProductScalarWhereInput | DemanderProductScalarWhereInput[]
    OR?: DemanderProductScalarWhereInput[]
    NOT?: DemanderProductScalarWhereInput | DemanderProductScalarWhereInput[]
    id?: IntFilter<"DemanderProduct"> | number
    productName?: StringFilter<"DemanderProduct"> | string
    unitPrice?: FloatFilter<"DemanderProduct"> | number
    totalPrice?: FloatFilter<"DemanderProduct"> | number
    quantity?: IntFilter<"DemanderProduct"> | number
    historicalQuantity?: IntFilter<"DemanderProduct"> | number
    createdAt?: DateTimeFilter<"DemanderProduct"> | Date | string
    demanderId?: IntFilter<"DemanderProduct"> | number
  }

  export type DemanderCreateWithoutProductsInput = {
    userType?: string
    email: string
    organizationName: string
    address: string
  }

  export type DemanderUncheckedCreateWithoutProductsInput = {
    id?: number
    userType?: string
    email: string
    organizationName: string
    address: string
  }

  export type DemanderCreateOrConnectWithoutProductsInput = {
    where: DemanderWhereUniqueInput
    create: XOR<DemanderCreateWithoutProductsInput, DemanderUncheckedCreateWithoutProductsInput>
  }

  export type DemanderUpsertWithoutProductsInput = {
    update: XOR<DemanderUpdateWithoutProductsInput, DemanderUncheckedUpdateWithoutProductsInput>
    create: XOR<DemanderCreateWithoutProductsInput, DemanderUncheckedCreateWithoutProductsInput>
    where?: DemanderWhereInput
  }

  export type DemanderUpdateToOneWithWhereWithoutProductsInput = {
    where?: DemanderWhereInput
    data: XOR<DemanderUpdateWithoutProductsInput, DemanderUncheckedUpdateWithoutProductsInput>
  }

  export type DemanderUpdateWithoutProductsInput = {
    userType?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organizationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type DemanderUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userType?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organizationName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type SupplierProductCreateManySupplierInput = {
    id?: number
    productName: string
    unitPrice: number
    totalPrice: number
    quantity: number
    historicalQuantity: number
    createdAt?: Date | string
  }

  export type SupplierProductUpdateWithoutSupplierInput = {
    productName?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    historicalQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierProductUncheckedUpdateWithoutSupplierInput = {
    id?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    historicalQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierProductUncheckedUpdateManyWithoutSupplierInput = {
    id?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    historicalQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DemanderProductCreateManyDemanderInput = {
    id?: number
    productName: string
    unitPrice: number
    totalPrice: number
    quantity: number
    historicalQuantity: number
    createdAt?: Date | string
  }

  export type DemanderProductUpdateWithoutDemanderInput = {
    productName?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    historicalQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DemanderProductUncheckedUpdateWithoutDemanderInput = {
    id?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    historicalQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DemanderProductUncheckedUpdateManyWithoutDemanderInput = {
    id?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    historicalQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use SupplierCountOutputTypeDefaultArgs instead
     */
    export type SupplierCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SupplierCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DemanderCountOutputTypeDefaultArgs instead
     */
    export type DemanderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DemanderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SupplierDefaultArgs instead
     */
    export type SupplierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SupplierDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SupplierProductDefaultArgs instead
     */
    export type SupplierProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SupplierProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DemanderDefaultArgs instead
     */
    export type DemanderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DemanderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DemanderProductDefaultArgs instead
     */
    export type DemanderProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DemanderProductDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}